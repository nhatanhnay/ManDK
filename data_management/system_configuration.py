"""
File c·∫•u h√¨nh ƒë·ªãnh nghƒ©a c√°c module v√† th√¥ng s·ªë cho t·ª´ng h·ªôp/t·ªß trong h·ªá th·ªëng.
M·ªói node (h·ªôp/t·ªß) c√≥ danh s√°ch modules c·ª• th·ªÉ v·ªõi th√¥ng s·ªë m·∫∑c ƒë·ªãnh.
"""

from typing import Dict, List, Any
from dataclasses import dataclass

@dataclass
class ModuleConfig:
    """C·∫•u h√¨nh c·ªßa m·ªôt module."""
    name: str
    default_voltage: float = 12.0      # ƒêi·ªán √°p m·∫∑c ƒë·ªãnh (V)
    default_current: float = 2.0       # D√≤ng ƒëi·ªán m·∫∑c ƒë·ªãnh (A) 
    default_power: float = 24.0        # C√¥ng su·∫•t m·∫∑c ƒë·ªãnh (W)
    default_resistance: float = 50.0   # ƒêi·ªán tr·ªü m·∫∑c ƒë·ªãnh (Œ©)
    default_temperature: float = 35.0  # Nhi·ªát ƒë·ªô m·∫∑c ƒë·ªãnh (¬∞C)
    min_voltage: float = 8.0           # Ng∆∞·ª°ng ƒëi·ªán √°p t·ªëi thi·ªÉu
    max_voltage: float = 15.0          # Ng∆∞·ª°ng ƒëi·ªán √°p t·ªëi ƒëa
    max_current: float = 8.0           # Ng∆∞·ª°ng d√≤ng ƒëi·ªán t·ªëi ƒëa
    max_temperature: float = 70.0      # Ng∆∞·ª°ng nhi·ªát ƒë·ªô t·ªëi ƒëa
    description: str = ""              # M√¥ t·∫£ ch·ª©c nƒÉng module

# Refactored: Import node configurations from separate module - Updated path
try:
    from config.node_configs import (
        get_battery_node_config,
        get_power_distribution_node_config,
        get_transformer_node_config,
        get_servo_control_node_config,
        get_control_unit_node_config,
        get_control_panel_node_config,
        get_hn_system_node_config,
        get_communication_node_config,
        get_main_control_panel_config,
        get_main_electrical_panel_config,
        get_sight_column_electrical_config,
        get_optoelectronic_config
    )

    # C·∫•u h√¨nh modules cho t·ª´ng node/h·ªôp/t·ªß - Refactored to use functions
    NODE_MODULE_CONFIG: Dict[str, List[ModuleConfig]] = {

        # === KHOANG ƒêI·ªÄU KHI·ªÇN T·∫†I CH·ªñ 1 ===
        'ac_quy_1': get_battery_node_config(),
        'phan_phoi_1': get_power_distribution_node_config(),
        'bien_ap_1': get_transformer_node_config(),
        'dan_dong_huong_1': get_servo_control_node_config("direction"),
        'dan_dong_tam_1': get_servo_control_node_config("elevation"),
        'dieu_khien_1': get_control_unit_node_config(),
        'ban_dieu_khien_1': get_control_panel_node_config(),
        'hn11': get_hn_system_node_config("HN11"),
        'hn12': get_hn_system_node_config("HN12"),

        # === KHOANG ƒêI·ªÄU KHI·ªÇN GI·ªÆA ===
        'giao_tiep_hang_hai': get_communication_node_config(),
        'ban_dieu_khien_chinh': get_main_control_panel_config(),
        'bang_dien_chinh': get_main_electrical_panel_config(),

        # === KHOANG ƒêI·ªÄU KHI·ªÇN T·∫†I CH·ªñ 2 (t∆∞∆°ng t·ª± khoang 1) ===
        'ac_quy_2': get_battery_node_config(),
        'phan_phoi_2': get_power_distribution_node_config(),
        'bien_ap_2': get_transformer_node_config(),
        'dan_dong_huong_2': get_servo_control_node_config("direction"),
        'dan_dong_tam_2': get_servo_control_node_config("elevation"),
        'dieu_khien_2': get_control_unit_node_config(),
        'ban_dieu_khien_2': get_control_panel_node_config(),
        'hn21': get_hn_system_node_config("HN21"),
        'hn22': get_hn_system_node_config("HN22"),

        # === C·ªòT NG·∫ÆM ===
        'hop_dien': get_sight_column_electrical_config(),
        'hop_quang_dien_tu': get_optoelectronic_config()
    }

except ImportError:
    # Fallback to legacy configuration if new module not available
    print("Warning: Using legacy configuration. Consider updating imports.")
    NODE_MODULE_CONFIG: Dict[str, List[ModuleConfig]] = {
        # Fallback configuration would go here - keeping existing for compatibility
    }

def get_node_modules(node_id: str) -> List[ModuleConfig]:
    """L·∫•y danh s√°ch modules c·ªßa m·ªôt node."""
    return NODE_MODULE_CONFIG.get(node_id, [])

def get_all_nodes() -> List[str]:
    """L·∫•y danh s√°ch t·∫•t c·∫£ node IDs."""
    return list(NODE_MODULE_CONFIG.keys())

def get_node_info() -> Dict[str, Dict[str, Any]]:
    """L·∫•y th·ªëng k√™ th√¥ng tin c√°c nodes."""
    result = {}
    for node_id, modules in NODE_MODULE_CONFIG.items():
        total_power = sum(m.default_power for m in modules)
        max_voltage = max(m.default_voltage for m in modules) if modules else 0
        result[node_id] = {
            'module_count': len(modules),
            'total_default_power': total_power,
            'max_voltage': max_voltage,
            'modules': [m.name for m in modules]
        }
    return result

def validate_node_config(node_id: str) -> Dict[str, Any]:
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa c·∫•u h√¨nh node."""
    modules = get_node_modules(node_id)
    if not modules:
        return {'valid': False, 'error': f'Node {node_id} kh√¥ng c√≥ modules'}
    
    issues = []
    for module in modules:
        if module.default_voltage < module.min_voltage or module.default_voltage > module.max_voltage:
            issues.append(f'{module.name}: ƒêi·ªán √°p m·∫∑c ƒë·ªãnh ngo√†i ph·∫°m vi')
        if module.default_current > module.max_current:
            issues.append(f'{module.name}: D√≤ng ƒëi·ªán m·∫∑c ƒë·ªãnh v∆∞·ª£t gi·ªõi h·∫°n')
        if module.default_power != module.default_voltage * module.default_current:
            # Ch·∫•p nh·∫≠n sai s·ªë 10%
            calculated_power = module.default_voltage * module.default_current
            error_percent = abs(module.default_power - calculated_power) / calculated_power * 100
            if error_percent > 10:
                issues.append(f'{module.name}: C√¥ng su·∫•t kh√¥ng kh·ªõp v·ªõi V*I')
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'module_count': len(modules)
    }

# H√†m ti·ªán √≠ch ƒë·ªÉ t√¨m ki·∫øm modules
def find_modules_by_name(search_term: str) -> Dict[str, List[str]]:
    """T√¨m modules theo t√™n (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)."""
    result = {}
    search_lower = search_term.lower()
    
    for node_id, modules in NODE_MODULE_CONFIG.items():
        found_modules = []
        for module in modules:
            if search_lower in module.name.lower() or search_lower in module.description.lower():
                found_modules.append(module.name)
        
        if found_modules:
            result[node_id] = found_modules
    
    return result

def get_high_power_modules(power_threshold: float = 100.0) -> Dict[str, List[str]]:
    """L·∫•y danh s√°ch modules c√≥ c√¥ng su·∫•t cao."""
    result = {}
    
    for node_id, modules in NODE_MODULE_CONFIG.items():
        high_power_modules = []
        for module in modules:
            if module.default_power >= power_threshold:
                high_power_modules.append({
                    'name': module.name,
                    'power': module.default_power,
                    'voltage': module.default_voltage,
                    'current': module.default_current
                })
        
        if high_power_modules:
            result[node_id] = high_power_modules
    
    return result

if __name__ == "__main__":
    # Demo usage
    print("=== C·∫§U H√åNH MODULES TRONG H·ªÜ TH·ªêNG ===")
    
    # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
    print("\nüìä TH·ªêNG K√ä T·ªîNG QUAN:")
    info = get_node_info()
    total_modules = sum(info[node]['module_count'] for node in info)
    total_power = sum(info[node]['total_default_power'] for node in info)
    
    print(f"T·ªïng s·ªë nodes: {len(info)}")
    print(f"T·ªïng s·ªë modules: {total_modules}")
    print(f"T·ªïng c√¥ng su·∫•t m·∫∑c ƒë·ªãnh: {total_power:.1f}W")
    
    # Hi·ªÉn th·ªã top nodes c√≥ nhi·ªÅu modules nh·∫•t
    print(f"\nüèÜ TOP NODES C√ì NHI·ªÄU MODULES:")
    sorted_nodes = sorted(info.items(), key=lambda x: x[1]['module_count'], reverse=True)
    for i, (node_id, data) in enumerate(sorted_nodes[:5]):
        print(f"{i+1}. {node_id}: {data['module_count']} modules ({data['total_default_power']:.1f}W)")
    
    # Ki·ªÉm tra m·ªôt v√†i nodes
    print(f"\nüîç KI·ªÇM TRA C·∫§U H√åNH:")
    test_nodes = ['hop_dien', 'hop_quang_dien_tu', 'bang_dien_chinh']
    for node_id in test_nodes:
        validation = validate_node_config(node_id)
        status = "‚úÖ H·ª£p l·ªá" if validation['valid'] else "‚ùå C√≥ l·ªói"
        print(f"{node_id}: {status}")
        if not validation['valid']:
            for issue in validation['issues']:
                print(f"  - {issue}")
    
    # T√¨m modules c√¥ng su·∫•t cao
    print(f"\n‚ö° MODULES C√îNG SU·∫§T CAO (>1000W):")
    high_power = get_high_power_modules(1000.0)
    for node_id, modules in high_power.items():
        print(f"{node_id}:")
        for module in modules:
            print(f"  - {module['name']}: {module['power']}W")